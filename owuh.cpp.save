#include <bits/stdc++.h>

using namespace std;

#define endl "\n";
#define inrange(x) ((x)>=0 && (x)<=7)
#define cinrange(x) (inrage((x).first) && inrange((x).second))
#define p2(R,L,i) Parse(R,Parse(L,Parse(R,i)))
#define glp(s) get_letter_profile((s))
#define wt wordtarget
#define st scoretarget
#define sl(a) ((a)-'A'+1)
typedef long long ll;
typedef unsigned long long ull;


vector<vector<ull>> get_combos(string park)
{
    vector<vector<ull>> combos;
    string park2(park.length(),' ');
    vector<int> cpark(park.length());
    for(int i = 0; i < park.length(); i++)
    {
        cpark[park[i]-'a'] = i;
    }
    combos.push_back({cpark[0]});
    park2[cpark[0]] = 'a';
    //cout << cpark[0] << " ";
    for(int c = 1; c < cpark.size(); c++)
    {
        //cout << cpark[c] << " ";
        combos.push_back({cpark[c]});
        for(int i = cpark[c]-1; park2[i]!=' ' && i >= 0; i--)
        {
            combos.back().push_back(i);
        }
        sort(combos.back().begin(),combos.back().end());
        park2[cpark[c]] = c+'a';
    }
    //cout << endl;
    return combos;
}

vector<ull> get_multi(vector<vector<ull>> &combos)
{
    vector<ull> multi(combos.size());
    ull cur = 1;
    multi[multi.size()-1] = 1;
    for(int i = combos.size()-2; i >= 0; i--)
    {
        //cout << i << endl;
        multi[i] = combos[i+1].size()*cur;
        cur = multi[i];
    }
    return multi;
}

vector<int> get_path(vector<vector<ull>> &combos,vector<ull> &multi,ull index,ull cur = -1)
{
    if(cur == -1)
        cur = multi[0];
    int depth = 1;
    vector<int> path(multi.size(),0);
    path[0] = combos[0][0];
    while(cur > index && depth < multi.size())
    {
        int ii = combos[depth].size()-1;
        while(cur > multi[depth] && ii >= 0)
        {
            cur -= multi[depth];
            ii--;
        }
        path[depth] = combos[depth][ii+        depth++;
    }
    return path;
}

int main()
{
    //ios_base::sync_with_stdio(false);
    //cin.tie(NULL);

    string s;
    ull idx;
    cin >> s >> idx;
    vector<vector<ull>> combos = get_combos(s);
    cout << combos[0][0] << endl;
    for(auto i : combos)
    {
        for(auto j : i)
            cout << j << " ";
        cout << endl;
    }
    //cout << endl;
    //cout << "combo done" << endl;
    vector<ull> multi = get_multi(combos);
    for(ull i : multi)
    {
        cout << i << " ";
    }
    cout << endl;
    //cout << "multi done" << endl;
    vector<int> path = get_path(combos,multi,idx);
    cout << "path generated" << endl;
    string com;
    for(int i : path)
    {
        cout << i << " ";
        com+=(i+'A');
    }
    cout << endl;
    cout << com << endl;
    return 0;
}

